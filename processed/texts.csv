,path,text
0,juice-docs/docs/user/README.md," info Can't find what you need? [Join our Discord](https://discord.gg/juicebox) or [contact onboarding](https://juicebox.money/contact). Welcome to the Juicebox User Docs! Juicebox is an **Ethereum funding protocol** which can help you fund, operate, and scale your project on-chain. You can see how people are using it on [juicebox.money](https://juicebox.money) — it's an extremely powerful tool for building trust with your supporters, funding your project, and then running your project effectively. It takes about 10 minutes to create a Juicebox project, which you can use to: - Crowdfund your project with ETH. - Issue tokens and NFTs to your supporters — and reserve a percentage of those tokens/NFTs for you, your team, or a community stockpile. You can use these tokens/NFTs for governance rights, community access, or other perks. - Build trust with *Cycles*. - With unlocked cycles, you can edit your project's rules at any time. - With locked cycles, you can lock your project's rules for a period of time (like 3 minutes, 2 years, or 14 days), helping you build trust with your supporters. - Each cycle, compensate your team with automated payouts. 	- Payouts can be fixed ETH amounts, ETH amounts based on USD values, or percentages of all the ETH in your project. - Allow your supporters to redeem their tokens or NFTs to get back some of the ETH you don't need for payouts. This can be a full refund, a partial refund, or it can be turned off completely. - Add a deadline for edits, making last second edits to your Cycle impossible (and preventing rug pulls). With a 3-day deadline, your community is guaranteed 3 days to verify any queued edits. When you create your Juicebox project, the project's NFT will be sent to your wallet. This NFT is the only way to control your project — the project's rules are managed directly on the Ethereum blockchain, making your project independent, transparent, and uncensorable. You can change these rules over time, making Juicebox very effective for scaling communities. As your community evolves, so can your project. How do I start? You can [contact onboarding](https://juicebox.money/contact) or join the [JuiceboxDAO Discord](https://discord.gg/juicebox) — DAO members will answer your questions and help you to deploy your project. If you feel confident, you can create your project now on [juicebox.money/create](https://juicebox.money/create) — if you have questions about how you should set up your project, double check our [project setup guide](project/). We also have a [Goerli Testnet version of Juicebox](https://goerli.juicebox.money). If you need Goerli ETH, ask us. Video Walkthrough A quick project creation walkthrough. "
1,juice-docs/docs/user/examples.md," Project Setup Examples The examples below demonstrate how projects have used Juicebox to achieve their goals. Before looking at the examples below, read the success stories on [juicebox.money](https://juicebox.money): 1. [ConstitutionDAO](https://juicebox.money/success-stories/constitutiondao): How a group of friends on the internet raised over $46 million to buy the U.S. Constitution. 2. [MoonDAO](https://juicebox.money/success-stories/moondao): How a community of space enthusiasts raised $8.3 million to send a DAO member to space on a Blue Origin rocket. 3. [SharkDAO](https://juicebox.money/success-stories/sharkdao): How SharkDAO raised over 1,000 ETH to buy 6 Nouns NFTs and become the largest sub-DAO of Nouns DAO. 4. [StudioDAO](https://juicebox.money/success-stories/studiodao): How StudioDAO is building the first million person movie studio on Juicebox. Crowdfunding *Trying to raise as much funding as possible – for an auction, a charitable cause, or something else.* ConstitutionDAO [ConstitutionDAO](https://juicebox.money/p/constitutiondao) tried to buy a copy of the U.S. Constitution at auction, and was able to raise $49.6m to do so by using the following strategies: 1. Before launching the project, ConstitutionDAO had a Discord community with over 2,000 members and had gained the support of several well-established figures on Twitter – as always, sharing your narrative and building a community is an important first step. 2. For their first cycle, ConstitutionDAO had unlimited payouts with an unlocked cycle (no duration) and no edit deadline. This gave ConstitutionDAO members the flexibility to move funds or update the project however they needed to as the auction evolved, and the community trusted ConstitutionDAO because of the involvement of several public figures. 3. During the auction, ConstitutionDAO pulled the project's funds into the Gnosis Safe wallet which owned the project – this allowed them to bid on the Constitution. 4. ConstitutionDAO didn't win the auction. After some [brainstorming](/updates/constitutiondao-refund-brainstorm/), the community decided to perform a refund through Juicebox. Funds were transferred back to the project, payouts were set to 0, and the redemption rate was set to 100% – everyone who wanted to reclaim their funds could burn their $PEOPLE tokens to do so. The NFT which represented the project's ownership was then sent to a burn address (a wallet nobody has access to), guaranteeing that no further changes could be made to the project. To learn more about ConstitutionDAO, read [this blog post](/blog/constitutiondao-config/) and visit [constitutiondao.com](https://www.constitutiondao.com/). ConstitutionDAO 2 One year after the original ConstitutionDAO, [ConstitutionDAO 2](https://juicebox.money/v2/p/350) raised 233.2 ETH (worth TODO) in another bid at buying the Constitution. Unlike the original project, which used the $PEOPLE token, ConstitutionDAO 2 used NFTs to raise funds. The project had four NFT tiers with custom art: one priced at 0.1 ETH, one priced at 1 ETH, another priced at 10 ETH, and a final NFT priced at 100 ETH. While the project raised funds, it used a similar strategy to ConstitutionDAO – unlimited payouts, no deadline, and an unlocked cycle for maximum flexibility. When Sotheby's unexpectedly postponed the auction, ConstitutionDAO 2 gave their community two options: 1. For those who wanted to reclaim their funds and move on, the project set their payouts to 0 and enabled NFT redemptions with a redemption rate of 100% – this meant people could burn their NFTs for a full refund. 2. Those interested in continued participation were given the option to burn their ConstitutionDAO 2 NFT to claim membership in another group called UnumDAO. Alongside their Juicebox campaign, ConstitutionDAO 2 raised funds with [Nucleo](https://www.gonucleo.xyz/), a private multisig built on Aztec (a privacy-oriented zk-rollup). To learn more about this and project, visit [unumdao.org](https://unumdao.org/). ConstitutionDAO 2 built a website where people could learn about and support the project, and promoted the project across various social media platforms – in particular, Twitter and Discord. Also See - [AssangeDAO](https://juicebox.money/p/assangedao), a group which raised ~$52.4m to purchase a Murat Pak NFT, the revenues of which went towards the legal defense of Julian Assange. - [SpiceDAO](https://juicebox.money/p/spicedao), a group which raised ~$11.6m to purchase a copy of Jodorowski's screenplay for *Dune*. - [LunchDAO](https://juicebox.money/p/lunchdao), a group which raised ~$2.4m to purchase a lunch with Warren Buffet. Bootstrapping a Project *Raising funds to get a project started – using Juicebox as an alternative to loans or venture capital.* See: - [MoonDAO](https://juicebox.money/p/moondao), a DAO which sent one of their members into space and is funding decentralized access to space and space research. - [PandaDAO](https://juicebox.money/p/pandadao) was a developer DAO which created several NFT projects and tools for DAOs. - [DomainDAO](https://juicebox.money/p/domaindao) is attempting to establish a .dao TLD (top-level domain). Running a Project Over Time *Using Juicebox to run a project with ongoing payroll, token issuance, and revenues.* JuiceboxDAO [JuiceboxDAO](https://juicebox.money/@juicebox), the group which builds and maintains the Juicebox protocol and the ecosystem around it, is funded and managed on Juicebox – the DAO operates the first project on each version of the protocol, and is funded through direct contributions and [protocol fees](/dao/reference/jbx/#about-fees). [JuiceboxDAO v1](https://juicebox.money/p/juicebox) started off with a 30 day cycle, and a 7-day edit deadline – this conservative approach gave supporters confidence that they would be able to respond to changes to the project well in advance. The project also had a 10% reserved rate, a 60% redemption rate, and a **20% issuance reduction rate**. This issuance reduction rate (a per-cycle increase to token price) was extremely large – this gave a strong incentive to support the project within its first cycle instead of supporting it later on. The relatively low redemption rate was another incentive in favor of supporting the projects – contributors received most of the tokens issued by their payments. Additionally, the project had payouts to contributors from day one. This set a tone of rewarding contributors, which attracted developers and other people interested in contributing to the community. Later cycles operated on a shorter 14-day cadence, synchronized with the DAO's 14 day [Governance Process](/dao/process/). JuiceboxDAO uses project token voting on [Snapshot](https://snapshot.org) to make decisions, and implements governance outcomes through its [Gnosis Safe](https://app.safe.global/apps/open?safe=eth:0xAF28bcB48C40dBC86f52D459A6562F658fc94B1e). The DAO collaborates in its [Discord server](https://discord.gg/juicebox), and reaches new members on [Twitter](https://twitter.com/juiceboxETH). TileDAO The [TileDAO](https://juicebox.money/p/tiles) project was funded by primary sales from the [Tiles NFT collection](https://tiles.art/#/). Both the DAO and the NFT collection were created by [@peripheralist](https://twitter.com/peripheralist), and the project was used to manage grants, payouts, and event funding. The project was owned by a Gnosis Safe multisig, and used 7-day cycles, a 50% redemption rate, and paid contributors from the beginning. This allowed the project to quickly fund and iterate upon new ideas. The project used a 10% reserved rate and a 0% issuance reduction rate when it was launched, but token issuance tapered off over time as the reserved rate was raised to 34% and the issuance reduction rate was raised to 2%. This 2% reduction in token issuance each cycle compounded quickly due to the short cycles – within several months, token issuance was reduced to less than half its original rate. The project grew through organic traction [on Twitter](https://twitter.com/Tile_DAO), and community members joined a private Discord server for verified NFT holders. TileDAO went on to run several events, create murals, and launch a second NFT project called [Dreamland](https://tiles.art/#/dreamland). Also See - [Peel](https://juicebox.money/@peel), the group of frontend developers building [juicebox.money](https://juicebox.money). - [StudioDAO](https://juicebox.money/@studiodao), a group building a decentralized movie studio owned by filmmakers and fans. - [Slice](https://juicebox.money/p/slice), a dapp which allows people to sell items, mint NFTs, and split payments from a decentralized store. Buying NFTs *Although this is conceptually similar to [Crowdfunding](#crowdfunding), many people use Juicebox to group-buy NFTs from popular collections.* See: - [SharkDAO](https://juicebox.money/p/sharkdao) raised 1,019 ETH to buy 6 Nouns NFTs and become the largest sub-DAO of Nouns DAO. - [Gobbler's Union](https://juicebox.money/@gobblerunion) raised 286 ETH to buy [Art Gobblers](https://artgobblers.com/) NFTs. - [Merge DAO](https://juicebox.money/p/mergedao) raised 198 ETH to buy Murat Pak's [Merge](https://www.niftygateway.com/collections/pakmerge) NFTs. "
2,juice-docs/docs/user/brand-kit.md," info If you're looking for something else, ask us on [Discord](https://discord.gg/juicebox). Resources | Name/Link | Description | | | | [Brand Guidelines PDF](/pdf/Juicebox-brand-guidelines-2023.pdf) | Our updated brand guidelines. | | [Brand Refresh on Figma](https://www.figma.com/file/jHNCnyxgB0DVLPTwmbOohq/JBM-Brand-Refresh-Website-2023?node-id=63%3A10352&t=EQbu5gdTfNTJSjvr-1) | Design files, style guide, assets and more. | | [Style Guide](https://www.figma.com/file/jHNCnyxgB0DVLPTwmbOohq/JBM-Brand-Refresh-Website-2023?node-id=41%3A12214&t=EQbu5gdTfNTJSjvr-1) | Our updated style guide. | | [WAGMI Studios Google Drive](https://drive.google.com/drive/folders/1-06MIi6xI9PjM3ENoUsxe2R-aQe4-uL0) | Juicebox artwork created by [WAGMI Studios](https://juicebox.money/@wagmi-studios). | | [Contact Us](https://juicebox.money/contact) | Have questions or inquiries? Get in touch with us. | | [Our PFP](/img/site/jb-pfp.png) | Our profile picture on Discord and other platforms. | "
3,juice-docs/docs/user/risks.md, import {Redirect} from '@docusaurus/router'; const Home = () => { return ; }; 
4,juice-docs/docs/user/project.md," info We also have a [video tutorial](https://www.youtube.com/watch?v=2s2OyxG_rvo). If you need help, [join our Discord](https://discord.gg/juicebox) or [contact onboarding](https://juicebox.money/contact). To begin, visit [juicebox.money/create](https://juicebox.money/create). You will need to have an Ethereum wallet and some ETH to pay for gas fees. - If you need an Ethereum wallet, visit [Metamask.io](https://metamask.io/) to set one up. - To experiment before committing to mainnet, you can use the [Goerli Testnet juicebox.money](https://goerli.juicebox.money/). What to know beforehand: - You can edit all of your project's rules over time — this allows your project to evolve as your community does. - When you create a Juicebox project, the project's NFT is minted to your wallet. Only the holder of that NFT (the project owner) can edit the project's rules. Nobody else can edit your project's rules — not even JuiceboxDAO. - This guide is based on [juicebox.money](https://juicebox.money/create). If you're setting up your project somewhere else, the steps might be different. Project Settings Project details Your project's name, logo, and description. Tell people what your project is about, and why they should support it! You can edit these later. For an animated logo, upload a `.gif`. Cycles With unlocked cycles, you can edit your project's rules at any time. With locked cycles, you can lock your project's rules for a period of time (like 3 minutes, 2 years, or 14 days), helping you build trust with your supporters. If you try to edit your rules in the middle of a locked cycle, the edits get *queued* for the next cycle. In other words: instead of going into effect immediately, they go into effect when your next cycle starts. If your don't queue a new cycle, Juicebox copies your current rules over. *How to choose:* If you **need** the flexibility, you can use unlocked cycles — otherwise, locked cycles are the better option for building confidence with your supporters. Payouts The amount of ETH which can be paid out from your project during the cycle. Payouts reset each cycle. - Having no payouts means you can't pay out any ETH. - 3 ETH of payouts lets you pay out 3 ETH. - $4,500 of payouts lets you pay out $4,500 worth of ETH. - ""Unlimited payouts"" lets you pay out all of the ETH in the project. The ETH not needed for a cycle's payouts will: 1. Serve as a runway. Your payouts reset every cycle, so leaving ETH in the project gives you a head-start for next cycle. 2. Allow your supporters to redeem their tokens to receive some ETH back from the project. You can choose the amount of ETH they receive by setting up a [redemption rate](#redemption-rate). *How to choose:* The lower you set your payouts, the more ETH will be available for redemptions, making supporters more likely to trust your project — and if you start with **no** payouts, you can offer your supporters a full refund. Keep in mind that payouts are the only way for you to access funds. If you need more flexibility, set this to a higher amount. Payout Recipients This is where your payouts are sent. By default, payouts go to your wallet (the project owner), but you can set up any number of Ethereum wallets or Juicebox projects to pay ETH to. You can define payouts by percentage (50% of funds go to `vitalik.eth`) or by amount (3 ETH goes to the `@peel` project, or $2,500 worth of ETH goes to `jango.eth`). You can use these payouts to manage your organization's entire payroll — JuiceboxDAO does. info Payouts to wallets (like `vitalik.eth`) will incur a 2.5% fee, which is paid to JuiceboxDAO. In exchange, your project will receive JuiceboxDAO's project token ($JBX), allowing you to govern the protocol. You can also redeem these tokens to reclaim some of the fees. Payouts to Juicebox projects don't incur any fees. To learn more, read [JBX & Fees](/dao/reference/jbx/). Edit deadline Edits must be made before this deadline. This gives token holders time to verify the edits before they take effect, and assures them that you can't edit the cycle at the last second. For example: with a 3-day edit deadline, edits must be made at least 3 days before a cycle starts. Otherwise, those edits won't take effect until the cycle *after* the next one. *How to choose:* The longer your edit deadline, the easier it will be for supporters to check your edits, but the harder it will be to move quickly. A 3-day deadline is a good starting point for most projects. Token info Project tokens are not ERC-20 tokens by default. Once you deploy your project, you can issue an ERC-20 for your supporters to claim, making them compatible with tools like Uniswap. This is optional. Total issuance rate The total number of tokens issued when this project is paid 1 ETH. Some of these tokens may be reserved by the project, and the rest are sent to the payer. *How to choose:* The protocol calculates everything proportionately, so this number doesn't matter too much. 1,000,000 is a good starting point for most projects. Reserved rate As tokens are issued, you can set aside a percentage of them for the wallets and Juicebox projects of your choosing. With a reserved rate of 20%, 20% of tokens are redirected towards whoever is on your list. *How to choose:* If you need to offer full refunds, set this to 0%. Reserved rates can vary widely — projects set this anywhere from 0% to 50%. Issuance reduction rate This makes your token more expensive over time. With an issuance reduction rate of 5%, your tokens will get 5% more expensive each cycle, even if you don't edit the cycle. *How to choose:* The issuance reduction rate can have a dramatic effect: the higher you set it, the more you reward earlier supporters over later ones. Most projects will keep this disabled, or use a rate from 1-3%. Redemption rate Supporters can burn their tokens to reclaim some of the ETH not needed for payouts. The amount of ETH they receive depends on the redemption rate. At 100%, redemptions are 1:1 — somebody redeeming 10% of all project tokens will receive 10% of the overflow. At 0%, redemptions are turned off. Anywhere else, redemptions take place along a bonding curve, meaning earlier redeemers will get less ETH per token redeemed, and later redeemers will get more. The lower this rate is, the less of an incentive there is to redeem tokens before others. *How to choose:* To start, you should keep this rate at 100% (redemptions on) or 0% (redemptions off), and then adjust from there. Owner token minting If this is enabled, you (the project owner) can issue tokens on demand. *How to choose:* This will appear risky to supporters, so keep this off unless you're completely sure you need to enable it. NFTs Juicebox also lets you reward your supporters with one or more custom NFT tiers: - **You can use NFTs for redemption instead of using tokens.** - You can set up tiers when creating your project, and can also add or remove tiers over time. - Each tier can have unique metadata, as well as a unique price, maximum supply, reserved rate, and governance voting power. You can use NFTs for off-chain governance with a tool like [Snapshot](/user/resources/snapshot/), or for on-chain governance with Governor Contracts — Juicebox NFTs adhere to the [`ERC721Votes`](https://docs.openzeppelin.com/contracts/4.x/api/token/erc721#ERC721Votes) standard. [*Learn more about on-chain governance.*](#on-chain-governance) info These NFTs are a great way to create an NFT collection for your artwork — some projects use Juicebox for this alone, turning off tokens entirely. caution Adding NFTs may increase the gas fee for creating your project. Tiers You need to have at least one tier for your project to have NFTs. To add a tier, click `Add NFT`. Each tier can have: - A unique image, name, description, and link. - A price. If this is set to 1 ETH, somebody who pays your project 1 ETH will receive 1 ETH worth of project tokens **and** an NFT. - A limited supply — the maximum number of NFTs that can be minted from this tier. You can use this to encourage people to be within the first 50 supporters, or you can make an expensive 1/1 NFT. Each tier can have a different supply. You can also set advanced options: - **Reserved NFTs.** For every `N` NFTs minted, mint an extra one to the address of your choosing. This can be a helpful way to reward your collaborators. - **Voting weight.** Give each tier a custom voting weight, which can be used for off-chain governance (with a tool like [Snapshot](/user/resources/snapshot/), or for on-chain governance. - **External link.** Link minters to your project's website, Discord, or somewhere else. Collection Settings These settings apply to all of your NFTs: - ""Collection Name"", ""Collection Symbol"", and ""Collection Description"" are each a different piece of collection metadata which will be displayed in wallets and on websites like [Zora](https://zora.co/) and [OpenSea](https://opensea.io/). - The **Payment Success Pop-up** is an optional pop-up shown when people mint an NFT. You can use this to direct contributors to your project's website, Discord, or somewhere else. On-chain Governance info Snapshot strategies can read each NFT's voting power, even if your project is set to `No on-chain governance`. See [*Using Snapshot With Juicebox*](/user/resources/snapshot/). Juicebox NFTs adhere to the [`ERC721Votes`](https://docs.openzeppelin.com/contracts/4.x/api/token/erc721#ERC721Votes) standard, meaning you can use them with on-chain governance tools like [Tally](https://tally.xyz/). This works by tracking an NFT's ownership over time as it is minted, burned, traded, or transferred, meaning that you can calculate the voting power of any address at any time (even for times in the past). [juicebox.money](https://juicebox.money) lists three on-chain governance options: | Option | Description | | | | **No on-chain governance** | Your project won't track voting power over time. | | **Standard on-chain governance** | Track the total voting power of each address over time. | | **Tier-based on-chain governance** | Instead of tracking total voting power, the contract tracks each address' voting power within each NFT tier over time. This can be useful for running multiple voting processes out of one treasury, or for complex on-chain governance. | "
5,juice-docs/docs/user/next-steps/community.md," Community **Where can your community members find each other and collaborate?** Most projects use one or more of the following: Communication Discord [Discord](https://discord.gg/) is among the most popular social platforms in crypto. It allows users to create free, invite-only servers for their communities. Discord servers support messaging across multiple channels, voice/video calls, and the configuration of complex permission structures. Discord also supports bots and other automations through its API. To get started, look at our pre-built [Discord Server Templates/Guide](/user/resources/discord/) for Juicebox projects. Telegram [Telegram](https://telegram.org/) is a popular messaging application for mobile and desktop. This is great option if you need a simple tool for real-time chat or to make announcements to your community. Telegram also has an [extensive API](https://core.telegram.org/api) which you can use for bots or other automations. Discourse [Discourse](https://github.com/discourse) is an open source forum used by many web3 projects, including several Juicebox projects. Some projects use it to host formal governance discussion, and others use it for everything. Collaboration Notion [Notion](https://www.notion.so/) is a freemium note-taking and collaboration work space. To get an idea of what it can do, visit the [JuiceboxDAO Notion](https://juicebox.notion.site/Juicebox-Notion-7b2436cec0c145c88b3efa0376c6dba3). "
6,juice-docs/docs/user/next-steps/README.md,"Next Steps Once you've deployed your project, you'll want to consider: 1. [**Custody.**](custody) Who/what holds the project, and how is it managed? 2. [**Governance.**](governance) How do decisions get made? 3. [**Community.**](community) Where can community members find each other and collaborate? 4. [**Visibility.**](visibility) How can you help people find your project? 5. [**Analytics.**](analytics) Where can you get information to make future decisions? The documents in this section should give you a good starting point. As always, join the [Discord](https://discord.gg/juicebox) or [contact onboarding](https://juicebox.money/contact) if you're looking for more help. "
7,juice-docs/docs/user/next-steps/custody.md," Custody When you create a Juicebox project, the project's NFT is minted to your wallet. Only the holder of that NFT (the ""project owner"") can change your project's rules. In other words, **you are the only person who owns your project.** Nobody else can change your project's rules — not even JuiceboxDAO. You can transfer this NFT to another wallet for safe-keeping and administration: 1. Open your project's page on [juicebox.money](https://juicebox.money). 2. Connect the wallet which currently owns the project. 3. Open your project settings by clicking the gear in the upper right-hand corner. 4. Select `Transfer Ownership` in the left-hand sidebar. Most projects use one of three options: 1. EOA EOA stands for *Externally Owned Account*. Put more simply, this means holding your project's NFT in a regular wallet (like Metamask or Ledger). This is the most centralized option: it gives you full control over the project, and the ability to make changes whenever you want (according to your project's rules). Your community will need to trust you! 2. Safe / Multisig (Recommended) Multisigs are smart contract wallets that require a minimum number of people to approve a transaction before it can occur. For example, if you have 3 main collaborators, you can set up the wallet to require approval from all 3 people before the transaction is sent. This assures that no single person could compromise the project or its funds. A multisig protects you and your community: - If one wallet becomes compromised, the attacker cannot take over your Juicebox project. - With a multisig, nobody can unilaterally execute malicious transactions affecting your Juicebox project. A multisig is an extra shield to protect your project from harmful or faulty reconfigurations. It does come with risks though—if you cannot meet the multisig's threshold, you will lose access to everything inside of it. The most popular multisig for managing Juicebox projects is [Gnosis Safe](https://safe.global/), which comes with a pre-built Juicebox integration: open the `Apps` menu, and open the Juicebox app to use it. You can even deploy your project from a Safe. info JuiceboxDAO contributors have also built: - A Gnosis Safe integration into [juicebox.money](https://juicebox.money/@juicebox/safe) - A Gnosis Safe [reconfiguration helper](https://juicetool.xyz/juicebox) for Juicebox projects - An [alternative Safe UI](https://juicetool.xyz/safe/0xAF28bcB48C40dBC86f52D459A6562F658fc94B1e) 3. Smart Contract A Juicebox project can also be owned by a smart contract to facilitate on-chain governance. See: - [blunt.finance](https://blunt.finance/), a tool for Juicebox projects to launch trustless funding rounds where contributors can get refunds if the fundraising target isn't reached. - [Defifa](https://defifa.net), an onchain sports prediction game built with Juicebox. If you're interested in running a similar competition, inquire in their [Discord](https://discord.gg/hrZnvs65Nh). - [juice-kickstart-governance](https://github.com/xBA5ED/juice-kickstart-governance). A helper to launch a (or reconfigure an existing) project on Juicebox preconfigured to use on-chain governance. If you're interested in using this, get in touch with `0xBA5ED#9353` in the [JuiceboxDAO Discord](https://discord.gg/juicebox) "
8,juice-docs/docs/user/next-steps/governance.md," Governance Governance: **how your project makes decisions**. Most projects use one of the three options: 1. No Governance Many projects have no need for formal governance — the project creator or a small group can make decisions without formal processes. You can add governance later on, when/if the need arises. 2. Offchain Governance (Recommended) info Most projects ratify a Governance Process to use alongside Snapshot voting. Feel free to use [our process](/dao/process/) as a starting point. You can also join our [Discord](https://discord.gg/juicebox) and tag `filipvv` and `0xSTVG.eth#7744` for help creating a new one. Although this could be as simple as conducting polls in a Discord server, project creators are advised to use [Snapshot](https://snapshot.org): > Snapshot is a decentralized voting system. It provides flexibility on how voting power is calculated for a vote. Snapshot supports various voting types to cater to the needs of organizations. Creating proposals and voting on Snapshot is user-friendly and does not cost gas as the process is performed off-chain. > > In short, Snapshot is an off-chain gasless multi-governance client with easy to verify and hard to contest results. You can deploy a Snapshot space for your project on [snapshot.org](https://snapshot.org/#/setup), or you can: 1. Visit your project's page on [juicebox.money](https://juicebox.money) with the project owner wallet connected. 2. Open your project's settings by clicking the gear in the upper right-hand corner. 3. Selecting `Governance` in the left-hand sidebar, and following the instructions on that page. Both of these options will require you to have an ENS address (this is a short name ending with `.eth` that refers to your wallet). If you don't have an ENS, visit [app.ens.domains](https://app.ens.domains). Once you have your space set up, you can use one of our [pre-written Snapshot strategies for Juicebox projects](/user/resources/snapshot/). If you're looking for something else, tag `filipvv` in the [Juicebox Discord](https://discord.gg/juicebox). info JuiceboxDAO contributors have built an [alternative Snapshot interface](https://juicetool.xyz/snapshot) with additional features (like search, filtering, and additional analytics). 3. Onchain Governance You can also govern your Juicebox project on-chain. Take a look at: - [blunt.finance](https://blunt.finance/), a tool for Juicebox projects to launch trustless funding rounds where contributors can get refunds if the fundraising target isn't reached. - [Defifa](https://defifa.net), an onchain sports prediction game built with Juicebox. If you're interested in running a similar competition, inquire in their [Discord](https://discord.gg/hrZnvs65Nh). - [juice-kickstart-governance](https://github.com/xBA5ED/juice-kickstart-governance). A helper to launch a (or reconfigure an existing) project on Juicebox preconfigured to use on-chain governance. If you're interested in using this, get in touch with `0xBA5ED#9353` in the [JuiceboxDAO Discord](https://discord.gg/juicebox) "
9,juice-docs/docs/user/next-steps/visibility.md," Visibility info For more tips on growing your community, read [Shopify's marketing plan guide](https://www.shopify.com/blog/marketing-plan). **How can you help people find your project?** Some popular tools include: Twitter [Twitter](https://twitter.com) has one of the most highly engaged online crypto communities — this should be your top priority! YouTube [YouTube](https://youtube.com) is self explanatory: upload some videos explaining what your project is and how people can support it! YouTube videos can also be great resources for people already in your community. A Blog Writing articles about your project can be a great way to attract online attention. You can either: - Make your own website, - use a standard blogging tool like [Medium](https://medium.com/), - or use a web3 blogging tool like [Mirror](https://mirror.xyz/)! A Website Having a landing page to explain your project is a great way to bring in traffic! If you're building your own website, you can use the [`juice-widgets`](https://github.com/jbx-protocol/juice-widgets) repo which has prebuilt assets and embeds for Juicebox projects. info Several Juicebox projects have massively benefited from traditional media coverage — especially ConstitutionDAO and AssangeDAO. If you are aiming to create a large-scale project, media outreach may be beneficial. "
10,juice-docs/docs/user/next-steps/analytics.md," Analytics info JuiceboxDAO's analytics are [public](/dao/reference/analytics/). **Where can you get information to make future decisions?** JuiceboxDAO contributors have built out several tools for you to use: Dune Analytics 1. The [Juicebox Project Dashboard](https://dune.com/juicebox/v3) ([v1 here](https://dune.com/juicebox/project-v1)) gives a detailed look into your project's cashflows, payouts, tokens, NFTs, and other trends. Enter your project ID and desired resolution, and then click `Apply all parameters`. 2. The [Juicebox User Dashboard](https://dune.com/juicebox/user) gives an overview of an individual wallet's interactions with various Juicebox projects. 3. The [Juicebox Overview](https://dune.com/juicebox/overview) provides a high-level overview of Juicebox protocol and JuiceboxDAO trends. Flipside 1. The [Snapshot Dashboard](https://app.flipsidecrypto.com/dashboard/snapshot-plus-data-ueqrnb) provides analytics on proposals, voters, and other trends for a Snapshot space. info Looking for some analytics that aren't here? [Contact us](https://discord.gg/juicebox). "
11,juice-docs/docs/user/guides/rewarding-your-community.md,"Airdrop Guide: Rewarding Your Community note This is a mirror of [y4000.eth's blog post](https://mirror.xyz/y4000.eth/DwtMwn_rOOqTyTvvshlRLy9jNiKa__hag9zQgAQtSHw). It’s amazing when a community comes together in the world of web3. It’s a bit sad to see one fizzle out just as quickly as it forms. Rewards play a key role in galvanizing a community further. As we’re figuring out these experiments with DAOs — I wanted to share the technicals of how I was able to whitelist 39,895 wallet addresses for an Ethereum mainnet smart contract while avoiding a cost prohibitive gas expense. This article dives into `NodeJS, JavaScript, Merkle Trees, and Solidity.` The “DAO” in question is one that has partially fizzled out, ConstitutionDAO, the original team responsibly abandoned the project after the initial goal (to win an auction to acquire a historic copy of the Constitution) failed. They made sure everyone who donated could get a refund — and avoided ever looking like scammers, which was definitely a good move. [PeopleDAO](https://www.people-dao.com/) formed shortly after, organizing around the $People ERC-20 token (which contributors could opt to claim instead of their refund). The token is inherently a fairly distributed token and it is great to see a community evolve out of it. I had come up with a generative art NFT Collection concept around the time the auction was lost — and I wanted to make it available for anyone who took part in the DAO. It was great to see so many new entrants into the world of web3 and I wanted to help keep them engaged. More about that [can be found here](https://constitution.y4000.xyz/). To get to the nuts and bolts of it all the starting point was getting an export of all the contributor wallets. JuiceBox — Get an Array of wallet addresses If you’ve run your DAO fundraising via JuiceBox, as the ConstitutionDAO did, they make it pretty easy to export the wallet list as a CSV file: > *Simply click on ""Holders""* On the holders dialog you’ll be able to select “Amount paid”: > *Clicking the little blue ""download"" icon on the right will get you a CSV* Once you’ve got the CSV, you will want to process that into a JavaScript Array list of wallet addresses. Here is a snip of NodeJS to generate the JSON: ```js const fs = require('fs'); const allFileContents = fs.readFileSync('../cdao_wallets.csv', 'utf-8'); let wallets = new Array(); allFileContents.split(/\r?\n/).forEach(line => { wallets.push(line.split(',')[0]); }); fs.writeFileSync('./wallets.json', JSON.stringify(wallets, null, 2) , 'utf-8'); ``` Building a Merkle Tree To get a basic understanding of what Merkle Trees are, I suggest starting [with the Wikipedia entry](https://en.wikipedia.org/wiki/Merkle_tree). Now that we have a list of wallets as a JavaScript Array we can process that array into a Merkle Tree and generate a `rootHash` — this is basically the “public key” for the tree, any proof can be validated with knowledge of the `rootHash` — once this is generated we use the value within our Solidity smart contract. We leverage two open source projects to achieve this: [keccak256](https://www.npmjs.com/package/keccak256) and [merkletreejs](https://www.npmjs.com/package/merkletreejs) — here is a NodeJS code snip to generate the `rootHash`: ```js const wallets = require('./wallets.json'); const keccak256 = require('keccak256') const { MerkleTree } = require('merkletreejs') const leafNodes = wallets.map(addr => keccak256(addr)) const merkleTree = new MerkleTree(leafNodes, keccak256, {sortPairs: true}) const rootHash = merkleTree.getRoot() console.log('rootHash', rootHash.toString('hex')) ``` Setting up a Webservice to Generate Merkle Proofs To verify if a wallet is a contributor we will need to generate a proof for that wallet and send that proof into the smart contract function the wallet wishes to transact on. In the case of the [CFRAC](https://constitution.y4000.xyz/) project, we’re allowing a contributor to mint an NFT for free…. On our mint website, the user is prompted to connect their wallet, once connected we verify if they are a contributing address, if so we generate the proof and allow them to run the `daoMint` function on our smart contract. Here a code snip of the simple webservice (built with [expressjs](https://www.npmjs.com/package/express)) to generate the proof: ```js const wallets = require('./util/wallets.json'); const keccak256 = require('keccak256') const { MerkleTree } = require('merkletreejs') const leafNodes = wallets.map(addr => keccak256(addr)) const merkleTree = new MerkleTree(leafNodes, keccak256, { sortPairs: true }) app.get(""/proof/:address"", (req, res) => { let addrs = req.params.address.toLowerCase(); let hexProof = merkleTree.getHexProof(keccak256(addrs)) // send json of res res.json(hexProof); }); ``` The `address` is simply the hex wallet address the user connected with passed in by the mint website frontend code. Finally, verify the Merkle Proof in the Smart Contract Once the frontend code has the proof in hand, it is ready to be sent to the `daoMint` function on the smart contract. Luckily for us, [OpenZeppeliln](https://openzeppelin.com/) makes available a library that makes this task super easy. Here is a Solidity code snip of the smart contract: ```solidity import ""@openzeppelin/contracts/utils/cryptography/MerkleProof.sol""; ... function daoMint(bytes32[] calldata _merkleProof) public whenNotPaused { bytes32 leaf = keccak256(abi.encodePacked(msg.sender)); require(MerkleProof.verify(_merkleProof, MERKLE_ROOT, leaf), 'NOT_DAO_MEMBER'); _safeMint(msg.sender, _tokenIdCounter.current()); _tokenIdCounter.increment(); } ``` Note the `MERKLE_ROOT` is a constant variable with the value of the earlier generated `rootHash`. You can view our full smart contract on Etherscan: [0x0fB73942cdffd45ccC8517061ae7430cDdde6b50](https://etherscan.io/address/0x0fB73942cdffd45ccC8517061ae7430cDdde6b50#code) Conclusion Given the maturity of all the open source libraries available, this otherwise complex concept can be distilled into a simple and elegant implementation. Feel free to reach out to me on Twitter: [twitter.com/Y_4_K](https://twitter.com/Y_4_K) — and be sure to check out the [CFRAC NFT collection](https://constitution.y4000.xyz/). "
12,juice-docs/docs/user/guides/multisig-transaction-guide.md,"Multisig Transaction Guide Multisig Process The Multisig Process was ratified by JBX holders in *[JBP - 98 Ratify Multisig Process](https://snapshot.org/#/jbdao.eth/proposal/0xaff54a1eebc16329758c925ff0fbbeb73718a0d06918609b1e8bbbf9c7cada68).* Multisig members should be aware of the following stipulations: 1. **The Juicebox multisig and Juicebox multisig owner accounts must agree to execute the will of JBX token holders, as expressed through the Juicebox Governance Process.** 2. Existing multisig members must agree to these principles, and prospective multisig members must agree to these principles before being added to the multisig. 3. These principles are intended as general guidelines that formalize existing processes while being flexible enough to adapt as Juicebox changes over time. Routine - Check the [**transaction queue**](https://gnosis-safe.io/app/eth:0xAF28bcB48C40dBC86f52D459A6562F658fc94B1e/transactions/queue) to see pending transactions. Double check the transaction data and [relevant proposals](https://snapshot.org/#/jbdao.eth) **before signing**. - Keep an eye on `#multisig` in the JuiceboxDAO Discord server to coordinate with other multisig members - The latest payouts and reserved JBX recipients can be found in `#bookkeeping.` Queue the reconfiguration and notify others in `#multisig`. - Request gas reimbursements in `#bookkeeping`. Juicebox v1.0 Multisig Actions *For more information about v1 transactions, look at the [Juicebox Docs](https://docs.juicebox.money/).* Treasury and Tickets | Transaction | Description | | | | TerminalV1.configure | Configure funding cycle properties including funding target, funding distribution, reserved tokens, etc. | | TerminalV1.printPreminedTickets | Print tickets to any address. Only works before payments have been received (no longer possible for JuiceboxDAO). | | TerminalV1.migrate | Migrate funds and operations to a new contract. | | TicketBooth.issue | Issues an owner's ERC-20 Tickets that'll be used when unstaking tickets and deploys an owner's Ticket ERC-20 token contract. | | TerminalV1_1.printTickets | Print tickets to any address (Only available on V1.1 projects—Allow minting tokens must be enabled). | Project Details | Transaction | Description | | | | Projects.setHandle | Set the project's handle. | | Projects.setUri | Set the project's URI (IPFS CDN with project info). | | Projects.transferHandle | Transfer handle to another address. | | Projects.claimHandle | Claim and apply a transferred handle. | | Projects.renewHandle | Renew a handle to prevent claiming for a year after it is challenged. | Project Control | Transaction | Description | | | | OperatorStore.setOperator | Give an address permission to take actions (full operation list) pertaining to a specified domain | | Projects.transfer | Transfer the ERC-721 that confers ownership in a Juicebox project to a new address. | Gnosis All Gnosis actions are available on [their app](https://gnosis-safe.io/app/eth:0xAF28bcB48C40dBC86f52D459A6562F658fc94B1e/settings/owners), use them for better UX. | Transaction | Description | | | | OwnerManager.addOwnerWithThreshold | Add a new owner to the Safe and update the threshold at the same time (check txn here) | | OwnerManager.removeOwner | Remove an owner from the Safe and update the threshold at the same time (check txn here) | | OwnerManager.changeThreshold | Update the number of owner accounts needed to confirm a Gnosis Safe transaction. | | | | Add Juicebox Safe 1. Go to [https://gnosis-safe.io/app/](https://gnosis-safe.io/app/) 1. Click “Add existing Safe”, input address “0xAF28bcB48C40dBC86f52D459A6562F658fc94B1e” 1. Label the owners if you’d like 1. Finish the procedure, and next time you could find JuiceboxDAO on your Gnosis App. How to write a “configure” transaction: First, add the [Juicebox app](https://gnosis-safe.io/app/eth:0xAF28bcB48C40dBC86f52D459A6562F658fc94B1e/apps?appUrl=https://juicebox.money) to Gnosis Safe: - navigate to Gnosis Apps - Add custom app -> [https://juicebox.money/](https://juicebox.money/) - check ""This app is not a Gnosis product and I agree to use this app at my own risk."" - click “Add” You can access the Juicebox website with multisig wallet connected. Navigate to the JuiceboxDAO project and find the “Reconfigure upcoming” button: Click on it to reconfigure. You will be able to see the preview before submit transaction. If you submit the txn, call other members to sign it on Gnosis App. How to read a “configure” transaction: Here are the interface definitions: ```solidity /** @notice Configures the properties of the current funding cycle if the project hasn't distributed tickets yet, or sets the properties of the proposed funding cycle that will take effect once the current one expires if it is approved by the current funding cycle's ballot. @dev Only a project's owner or a designated operator can configure its funding cycles. @param _projectId The ID of the project being reconfigured. @param _properties The funding cycle configuration. @dev _properties.target The amount that the project wants to receive in this funding stage. Sent as a wad. @dev _properties.currency The currency of the `target`. Send 0 for ETH or 1 for USD. @dev _properties.duration The duration of the funding stage for which the `target` amount is needed. Measured in days. Send 0 for a boundless cycle reconfigurable at any time. @dev _properties.cycleLimit The number of cycles that this configuration should last for before going back to the last permanent. This has no effect for a project's first funding cycle. @dev _properties.discountRate A number from 0-200 indicating how valuable a contribution to this funding stage is compared to the project's previous funding stage. If it's 200, each funding stage will have equal weight. If the number is 180, a contribution to the next funding stage will only give you 90% of tickets given to a contribution of the same amount during the current funding stage. If the number is 0, an non-recurring funding stage will get made. @dev _properties.ballot The new ballot that will be used to approve subsequent reconfigurations. @param _metadata A struct specifying the TerminalV1 specific params _bondingCurveRate, and _reservedRate. @dev _metadata.reservedRate A number from 0-200 indicating the percentage of each contribution's tickets that will be reserved for the project owner. @dev _metadata.bondingCurveRate The rate from 0-200 at which a project's Tickets can be redeemed for surplus. The bonding curve formula is https://www.desmos.com/calculator/sp9ru6zbpk where x is _count, o is _currentOverflow, s is _totalSupply, and r is _bondingCurveRate. @dev _metadata.reconfigurationBondingCurveRate The bonding curve rate to apply when there is an active ballot. @return The ID of the funding cycle that was successfully configured. */ function configure( uint256 _projectId, FundingCycleProperties calldata _properties, FundingCycleMetadata calldata _metadata, PayoutMod[] memory _payoutMods, TicketMod[] memory _ticketMods ) struct PayoutMod { bool preferUnstaked; uint16 percent; uint48 lockedUntil; address payable beneficiary; IModAllocator allocator; uint56 projectId; } struct TicketMod { bool preferUnstaked; uint16 percent; uint48 lockedUntil; address payable beneficiary; } ``` Real transaction as example to explain Check Gnosis safe tx detail [here](https://gnosis-safe.io/app/eth:0xAF28bcB48C40dBC86f52D459A6562F658fc94B1e/transactions/0x3c4ab13fcd7f62c4d6149b32fca3c64b1814d3931bb048bbbbce7cb681acdc68). What does this tx mean? - `_projectId: 1` we are configuring the JuiceboxDAO project - `_properties: ` ```solidity [ // it's 117453.82 based on 18 decimals 117453820000000000000000 // 0 for ETH, 1 for USD // funding target: $117,453.82 1 // funding duration: 14 days 14 // cycle limit: 0 0 // discount rate: 10% (based on 1000) 100 // contract address https://etherscan.io/address/0x6d6da471703647Fd8b84FFB1A29e037686dBd8b2 // ballot: 3-day delay 0x6d6da471703647Fd8b84FFB1A29e037686dBd8b2 ] ``` - `_metadata:` ```solidity [ // reserve rate: 50% (based on 200) 100 // bonding curve: 95% (based on 200) 190 // reconfiguration bonding curve: 95% 190 ] ``` - `_payoutMod:` ```solidity [ 	[ // preferUnstaked: false 	False // percent: 13.4 	1340 // lockedUntil: 0 	0 // beneficiary: 0x823b...ADAD (jango.eth) 	0x823b92d6a4b2AED4b15675c7917c9f922ea8ADAD // allocator: zero address 	0x0000000000000000000000000000000000000000 // only set this if you are paying other projects on Juicebox // projectId: 0 (not project but address outside Juicebox ecosystem) 	0 	] // other payout mod // ... ] ``` - `_ticketMods:` ```solidity [ 	[ // preferUnstaked: false 	False // percent: 1.92% 	192 // lockedUtil: 0 	0 // beneficiary: 0x823b...ADAD (jango.eth) 	0x823b92d6a4b2AED4b15675c7917c9f922ea8ADAD 	] // other ticket mod // ... ] ``` "
13,juice-docs/docs/user/guides/3-1-upgrade/index.md,"Upgrade your Juicebox project to v3.1 This guide describes how project creators can upgrade their Juicebox project from version 3.0 to version 3.1. {` img { max-width: 400px } `} Should I upgrade? Upgrading to Juicebox v3.1 is optional. If you're unsure if you need to upgrade, you probably don't! To decide if you should upgrade, reach out to a JuiceboxDAO contributor in [Discord](https://discord.gg/juicebox) to discuss your project. How to upgrade Take the following steps to upgrade your project to Juicebox v3.1. **Before you start**: - You must be the project owner. - There are (at most) 4 on-chain transactions that you'll need to execute. Have your wallet ready. - Allow 15 minutes. Update your cycle's rules To upgrade to v3.1, your project's current cycle must have the following rules enabled: - Allow Payment Terminal configuration - Allow Payment Terminal migration - Allow Controller migration If your cycle is locked, you'll need to wait until your next cycle to upgrade. Upgrade to v3.1 Once your cycle rules are active, take the following steps to continue the upgrade: 1. Connect to https://juicebox.money as the project owner. 2. Navigate to your project (e.g. https://juicebox.money/v2/p/1). 3. Select **Settings** > **Project upgrades**. 4. Select **Upgrade to Juicebox 3.1** 5. Select **Upgrade Controller**. This transaction will do the following: - Sets your project's [`JBController`](/dev/learn/architecture/#surface-contracts) contract to [`JBController v3.1`](/dev/api/contracts/or-controllers/jbcontroller3_1/). - Distributes any available reserved tokens. 6. Sign and submit the transaction, and wait for it to be confirmed. 7. Select **Upgrade Payment Terminal**. This transaction will do the following: - Sets your project's JBETHPaymentTerminal contract to JBETHPaymentTerminal v3.1. 8. Sign and submit the transaction, and wait for it to be confirmed. 9. Select **Move ETH**. This transaction will do the following: - Move your treasury funds from your old Payment Terminal to the new Payment Terminal 10. Sign and submit the transaction, and wait for it to be confirmed. Verify your upgrade To verify your upgrade, navigate to your project's **Contracts** page `juicebox.money/YOUR_PROJECT/contracts`. Check that your **JBController** and **Primary Terminal** addresses match the **JBController3_1** and **JBETHPaymentTerminal3_1** addresses from the [Contract Addresses list](/dev/resources/addresses/#ethereum-mainnet). "
14,juice-docs/docs/user/guides/reconfigure-project/index.md,"How to Reconfigure Your Juicebox Project Once you’ve created a Juicebox project—whether you’re a content creator, a DAO, a non-profit, or another type of project—you might want to change how your project is configured. Maybe you need to add or remove payouts, adjust your tokenomics, or add NFTs. All of these things and more can be done by reconfiguring your project. Follow this step-by-step guide or check out this YouTube video: Before you start Before you get started, you'll need to have: - A Juicebox project for which you are the owner Head over to [juicebox.money](http://juicebox.money) and connect your wallet. You can hover over your wallet address in the top right corner and click “My Projects” to find your project. For this tutorial, I made a quick project on Goerli called [The Bone Zone](https://goerli.juicebox.money/v2/p/443), which is a community and educational resource for dog lovers. We have some tiered NFTs that have utilities such as dog-safe treat recipes, breed-specific playtime activities for dogs, and a few limited 1-on-1 virtual dog coaching sessions. Getting started On your project page scroll down to `Funding cycle` and you’ll see a button that says `Reconfigure upcoming`. Click that and you’ll be brought to the `Reconfigure Funding Cycle` page that lets you review and change many of your project settings. Keep in mind that any changes made won’t take place until the next Funding Cycle. So, depending on how long your funding cycle is (ours is set to 14 days), your changes may not take effect for a number of days. Another thing to keep in mind is the `Reconfiguration Rules` that you have set, specifically the Delay Period which by default is 3 days. A 3-day delay means that reconfiguring an upcoming funding cycle **must** be done at least **3 days** before it starts. At the top of the `Reconfigure Funding Cycle` page, you’ll see a countdown that lets you know exactly how much time is left to submit your changes for the next funding cycle. So for this project we have about 6 days and 22 hours left to submit. For this example, I’m going to add a payout for my project. Step 1: Reconfigure Funding I’ll click `Funding` which will show my current `Funding cycle duration` and `Payouts`. Right now we have a 14-day funding cycle and a `Distribution Limit` of $5,000 USD, so that’s the max that can be withdrawn from the project treasury per 14-day funding cycle. At the moment, any funds distributed will go to the project owner, which is me, so I’ll click `Add payout recipient` and I’ll add my partner Matthew. In this example, Matthew is joining the team as a developer for this project and I want to add a payout so that he can get paid trustlessly and transparently from the project’s treasury. I’ll add a payout of $2500 USD to matthewbrooks.eth. This will be added to our `Distribution Limit` for a total of $7,500 USD. If we don’t reach that target, no worries, he will receive 33% of all funds withdrawn and the project owner (me) will receive the other 66%. Another way to set-up our payouts is with `Percentages`. If we choose this option, Matthew will receive 33% of all funds distributed and the project owner (me) will receive the other 66%. **The difference between this and Amounts** is that our `Distribution Limit` is now `Infinite`, so we can distribute as much as we want from the project treasury. This is a flexible strategy but can be seen as a risk to supporters of the project. If I **switch back** to `Amounts`, I’ll be prompted to set a **new** `Distribution Limit`. I’ll set this limit to $6,000 USD, which will be the max that can be withdrawn per 14-day funding cycle. If we withdraw the maximum of $6,000 USD, $2000 will go to Matthew and $4000 to me as the project owner, minus the 2.5% Juicebox membership fee. info Juicebox does not currently support stablecoins like USDC or DAI, so all USD values are **ETH denominated in USD.** Once I’m done, I’ll click `Save funding configuration` at the bottom. Step 2: Reconfigure Tokens The next section is `Token`. Here we can change the `Mint rate` which is the number of tokens minted per ETH contributed. We can also set our `Reserved Rate` which is the % of tokens set aside for addresses on the reserved list, `Discount rate` which decreases token issuance by a certain percentage each funding cycle, and `Redemption rate` which determines how much overflow each token can be redeemed for. Stay tuned for our deep dive tutorial on how to set-up your project’s tokenomics. Step 3: Reconfigure Rules In the next section you can adjust the `Rules` for your project. For example, maybe you need to `Pause payments` or enable `Redeemable NFTs` so contributors can burn their NFTs for a portion of the project’s overflow. If you scroll down, you can also change the `Delay Period` for your project. This is 3-day by default but can also be set longer or shorter. Projects set to `No delay` present risks for supporters: for example, a reconfiguration could be submitted at 11:59pm before the next funding cycle starts at midnight. The delay period helps mitigate this risk. Step 4: Reconfigure NFTs Last but not least, you can configure your project’s NFTs. You can edit existing NFTs by clicking on them, remove them with the trash icon, or add new NFTs. If you’ve made changes to this section, you’ll need to click `Deploy NFTs` and confirm the transaction in your browser wallet. If you need, you can also edit the collection name and description, click `Save collection details` when finished, and confirm the transaction in your browser wallet. Step 5: On-chain memo and start time Before submitting our reconfiguration, we can add an on-chain `Memo` to let supporters know why changes were made or just to leave a note. I’ll add a memo that says “Welcoming Matthew to the team!” and I’ll attach a Banny sticker with hearts. We can also specify a `Start time` as a UNIX timestamp, but we’ll leave this blank so that our reconfiguration will take effect as soon as possible. Step 6: Review and Deploy Once you’re done, you’ll see a summary of your project settings below. So now our `Distribution Limit` is set to $6,000 and we can see the two payouts: one to Matthew and the other to the project owner. Please note that these USD amounts take into account the JBX membership fee. Once you’ve reviewed everything, you can click `Deploy funding cycle configuration` and confirm the transaction in your browser wallet. And that’s it! You’ve successfully reconfigured your project. Once we refresh our project page, we can see that we successfully reconfigured our project’s funding cycle. You can also click on `Upcoming` under `Funding Cycle` to see the details of our newly configured cycle: when it starts and ends, etc. If you have any questions or need help along the way, drop into the Support channel in [Juicebox Discord](https://discord.gg/juicebox). "
15,juice-docs/docs/user/guides/etherscan/index.md," Launch a project 1. Visit the [`JBController3_1`](/dev/api/contracts/or-controllers/jbcontroller3_1/) contract on Etherscan [**here**](https://etherscan.io/address/0x97a5b9D9F0F7cD676B69f584F29048D0Ef4BB59b#writeContract#F4). If not already open, navigate to `Contract` → `Write Contract` → `4. launchProjectFor`. Connect your wallet by clicking “Connect to Web3”. 2. Input your desired parameters and click `Write` to submit your transaction: info If you are not already familiar with project parameters, read the [Programmable treasury guide](https://docs.juicebox.money/dev/build/programmable-treasury) and the [`launchProjectFor`](https://docs.juicebox.money/dev/api/contracts/or-controllers/jbcontroller3_1/#launchprojectfor) docs. 3. Once the transaction has been confirmed, visit [juicebox.money](https://juicebox.money/#/projects?tab=myprojects) to find your project. Reconfigure a funding cycle 1. Visit the [`JBController3_1`](/dev/api/contracts/or-controllers/jbcontroller3_1/) contract on Etherscan [**here**](https://etherscan.io/address/0x97a5b9D9F0F7cD676B69f584F29048D0Ef4BB59b#writeContract#F8). If not already open, navigate to `Contract` → `Write Contract` → `8. reconfigureFundingCyclesOf`. Connect your wallet by clicking “Connect to Web3”. 2. Input your desired parameters and click `Write` to submit your transaction: info If you are not already familiar with project parameters, read the [Programmable treasury guide](https://docs.juicebox.money/dev/build/programmable-treasury) and the [`reconfigureFundingCyclesOf`](/dev/api/contracts/or-controllers/jbcontroller3_1/#reconfigurefundingcyclesof) docs. 3. Once the transaction has been confirmed, visit [juicebox.money](https://juicebox.money/projects?tab=myprojects) to verify your reconfiguration. "
16,juice-docs/docs/user/guides/code4rena/index.md," info About Code4rena allows projects to run community-driven contests for smart contract audits – Code4rena contests have several advantages over traditional audits and bug bounty programs, and are particularly well suited for DeFi and other Ethereum projects. To learn more, read their [documentation](https://docs.code4rena.com/) Juicebox is an Ethereum funding protocol which can help you fund, operate, and scale your project on-chain – if you're not already familiar with how the protocol works, read [this document](/user/). Overview Code4rena is a great option for projects looking to audit their smart contracts, but it can be difficult to put together funds for bounties. Using Juicebox, you can *crowdfund* an audit instead: 1. Set up a Code4rena contest and figure out your budget. 2. Deploy a Juicebox project and begin accepting ETH from your supporters. You can pre-program your Juicebox project's rules so that no funds can be taken out while the fundraiser takes place. Later on, you can update your project such that it can pay for the audit. 2. In exchange for supporting your project with ETH, your community will receive your project's tokens (or NFTs). 3. If you fail to meet your budget, you can allow your token holders to redeem their tokens for a full refund. If you *exceed* your budget, token holders will be able to redeem for a proportional share of the surplus. Regardless of whether or not your budget is met, you'll have an on-chain record of support which you can use for airdrops, whitelist access, governance, or other rewards in the future. And if you continue to use Juicebox, you can continue to evolve your project over time to manage tokenomics, payouts, and funds. Another benefit to this process is trustlessness. With a properly configured Juicebox project, supporters can be sure of your next steps at all times, meaning that even an anonymous community member could help fund and run an audit. Steps 1. Create your audit First, apply for an audit on [Code4rena.com](https://code4rena.com/). Open the home page, click on ""Get your project audited"", and fill out the form to submit a request. A Code4rena contributor will reach out with further information and help you to put together a reasonable budget and timeline for your project. 2. Start your project Once you have a budget, visit [juicebox.money](https://juicebox.money/) to create your project – start by clicking ""Create a project"" on the home page. A form will appear asking for your project's details. Your description should clearly explain that the project is raising funds for your audit and answer common questions. Be sure to add links to the contest and your Discord server under ""project links"". 3. Cycles The next page will ask you how you want to set up your cycles. With unlocked cycles, you can edit your project's rules at any time. With locked cycles, you can lock your project's rules for a period of time (like 3 minutes, 2 years, or 14 days), helping you build trust with your supporters. If you try to edit your rules in the middle of a locked cycle, the edits get queued for the next cycle. In other words: instead of going into effect immediately, they go into effect when your next cycle starts. If your don't queue a new cycle, Juicebox copies your current rules over. For now, choose a **locked cycle** with a duration which will last until the time when Code4rena will need funds from you – for example, if Code4rena were to say they needed funds a week from the time you launch your project, you would use a 7 day locked cycle. This shows your community that you won't change your project's rules until then. If you don't want to launch your project immediately, you can schedule a future date using ""Schedule launch"". Your first cycle will start at that time. Once you're ready, move on to the next tab. 4. Payouts Since you want to keep all funds in the project for now, you can select **None** and move on to the next tab. 5. Tokens For this style of project, the **Basic Token Rules** work well – if you would like to customize your tokenomics now or later on, visit the [Project Setup Guide](/user/project/#token). If you would like to use NFTs instead of tokens, read the note below. Otherwise, you can move on to the **Deadline** tab. Using NFTs If you would prefer to use NFTs with custom artwork instead of tokens, you should select ""Custom Token Rules"" and set the total issuance rate to 0, turning off token minting completely. Then, move on to the NFT tab and add your NFT tiers by clicking ""Add NFT"". To learn about how you can customize your projects NFTs, see the [Project Setup Guide](/user/project/#nfts). 6. Deadline Edits must be made before this deadline. This gives token holders time to verify the edits before they take effect, and assures them that you can't edit the cycle at the last second. For example: with a 3-day edit deadline, edits must be made at least 3 days before a cycle starts. Otherwise, those edits won't take effect until the cycle *after* the next one. For a fast-paced fundraiser, a 1-day deadline strikes a good balance, giving the community enough time to verify updates while giving the project owner sufficient flexibility. Having no deadline is not recommended, as it would allow a project creator to change the next cycle right before it went into effect, potentially rugging the community. The other rules below can be left on their default options. 7. Deploy When you move to the next tab, you'll see a summary of the rules you've set up so far. Verify each tab, and once you've read and accepted the terms of service and the risks, click ""Deploy project to Ethereum"". 8. Next Steps From here, you'll be taken to your project page and given the option to set the project's handle, deploy an ERC-20, or take several other actions. Don't worry about these for now – you can do them later. Once you announce your project and share it with your community, you can share any plans you may have to reward supporters in the future. You'll want to queue your next cycle *before* your edit deadline – if you chose the 1-day deadline, this would be at least 24 hours before the next cycle began. Setting up your next cycle To update your project's cycle, visit your project's page on [juicebox.money](https://juicebox.money) and connect the wallet which you used to deploy the project. **If you haven't met your budget goal,** no changes are needed. Announce this to your community, and they will be able to redeem their tokens for a full refund (less gas fees) at any time. **If you've met your budget goal,** open the ""Settings"" menu in the upper-right hand corner of the screen and navigate to the ""Cycle"" tab on the left-hand side of the settings page. Click on ""Funding"" to set up your new payouts – since you'll only be paying for the Code4rena audit (for now), select **Amounts**. Next, click ""Add payout"" below – you'll want to send the payout to the Code4rena treasury ([`0xC2bc2F890067C511215f9463a064221577a53E10`](https://etherscan.io/address/0xC2bc2F890067C511215f9463a064221577a53E10) as of 2023-05-20). Enter your audit's budget as the payout amount. Make sure it's denominated in USD, and that it is locked for at least several days into the following cycle. A payout with a budget of 35,000 USD Click ""Add payout"", and then click ""Save funding configuration"" below. Afterwards, scroll down, click ""Deploy cycle"", and approve the transaction with your wallet. If you have any other questions or need help planning your next steps, join the [JuiceboxDAO Discord](https://discord.gg/juicebox) and tag `filipvv` in a message. "
17,juice-docs/docs/user/guides/physical-goods/index.md," Selling physical goods as NFTs on Juicebox is a powerful way for creators to expand their revenue streams and offer unique experiences to supporters of their project. Whether you're selling merch, physical artworks, or other IRL goods, you can create NFTs on Juicebox to token gate an [AddressForm](https://addressform.io/) with the shipping details needed to ship the items to supporters of your project. In this tutorial, JuiceboxDAO contributor [STVG](https://twitter.com/0xSTVG) pairs an NFT from a Juicebox project with a physical item in 5 simple steps and no coding required. You can follow along in the video tutorial on JuiceboxDAO YouTube or the step-by-step guide in this article. Step 1: Create a Form Using AddressForm *Address Form is a web3 form builder built by [pbrianandj](https://twitter.com/pbrianandj), a software engineer at [NounsDAO](https://twitter.com/nounsdao). You can create token gated forms, distribute POAPs, sign with wallet addresses, and more.* Go to [addressform.io](http://addressform.io) and create a form. You can edit the form details later to include all of the information needed from buyers but first you'll need to grab the form's URL to connect it to your Juicebox NFT. Step 2: Add NFTs on Juicebox From here you can start to create or edit your Juicebox project and add your NFTs (Name, Description, Collection Name, and Token Symbol). For this example, STVG is selling merch of Swim Shady, the nickname for one of [SharkDAO](https://sharks.wtf/)'s iconic [Nouns](https://nouns.wtf/). Step 3: Add AddressForm URL to Juicebox Payment Success Popup Next, click on the dropdown for `Payment Success Popup`. This is where you can direct supporters to your AddressForm once they have purchased an NFT. In the `Message` field, you can specify what type of information they'll provide via the AddressForm. For `Button link`, you can copy the link from your AddressForm and paste it into this field. **This step is critical** so make sure to double check everything before you deploy your project. Step 4: Deploy Project and Copy Contract Address Now you can deploy your Juicebox project and copy the `Contract Address` which can be found on your Project Page under `Funding Cycle > Cycle x > Data Source` at the bottom. You can hover over the address and click to copy it to your clipboard. Step 5: Token Gate the AddressForm using the Contract Address Go back to AddressForm and edit the form to include whatever information you need (e.g. shipping address, phone number, email) to send the item to whoever purchases the NFT. Save your changes. Under `Workflows` you'll see a toggle at the bottom for `ERC 721 Token Gating Workflow`. Turn this on and paste in the contract address that you copied from your Juicebox project. Save the changes and voila! info By token gating the form with the contract address, only people that hold NFTs from your Juicebox project will be able to access the form. Now when a supporter purchases an NFT from your Juicebox project, they'll be prompted to fill out your AddressForm so that you can send the item to their address. If you need help along the way, jump into the Support channel in [Juicebox Discord](https://discord.gg/juicebox). 📰 [Subscribe to the Juicebox newsletter](https://subscribepage.io/juicenews) 🚀 [Browse trending projects on Juicebox](https://juicebox.money/projects) 📹 [YouTube Tutorials](https://www.youtube.com/c/JuiceboxDAO) 🐦 [Juicebox on Twitter](https://twitter.com/juiceboxETH) "
18,juice-docs/docs/user/resources/troubleshoot.md," If you've run into errors on juicebox.money, you can often resolve them by: 1. Performing a hard refresh. This may differ by browser and operating system, but can typically be done with `CTRL + SHIFT + R` on Windows/Linux and `COMMAND + SHIFT + R` on Mac OS. 2. Click the `Reset Website` button on any error message. **This will clear your browser's local storage. You will lose any in-progress projects.** 3. Try a different browser. Juicebox.money is tested on Chrome-based browsers (including Brave and Edge), as well as Firefox-based browsers. 4. Try a different device. If you are running into trouble on a mobile device, a laptop or desktop computer may work. If you're still having trouble, send a message in our [Discord server](https://discord.gg/juicebox), or get in touch via the [Contact page](https://juicebox.money/contact). "
19,juice-docs/docs/user/resources/ecosystem.md," Peel Peel is the group of developers behind [juicebox.money](https://juicebox.money), the flagship interface for the Juicebox protocol. If you're looking to commission a custom website for your project, inquire in [Peel's Discord](https://discord.gg/7NmqDwGhn2). [Discord](https://discord.gg/7NmqDwGhn2) - [Website](https://juicebox.money) - [GitHub](https://github.com/jbx-protocol/juice-interface) - [Juicebox](https://juicebox.money/@peel) Blunt [Blunt](https://blunt.fund/) allows anyone to deploy a trustless crowdfunding round where contributors can get refunds at any point before the round is closed successfully – if a pre-defined target isn't met, refunds are made available to everyone. Blunt works best for project creators that know how much they need to raise ahead of time and want to maximize supporter trust. [Website](https://blunt.fund/) - [Discord](https://discord.gg/Jd8XQjwYZY) - [GitHub](https://github.com/blunt-fund) - [Juicebox](https://juicebox.money/v2/p/490) Defifa [Defifa](https://www.defifa.net/) allows anyone to create an on-chain prediction game for sports, elections, world events, or anything else. A game's creator represents different predictions as NFTs – people buy those NFTs to load a shared pot, and the people who minted the right NFTs get more of the pot when the game is finished. Which NFTs are ""right"" is decided by on-chain voting. Once a game finishes, anyone can submit scores to determine how much of the pot will go to the NFTs for each prediction. At least 50% of the NFTs for at least 50% of the predictions have to approve a set of scores – otherwise, people can reclaim their ETH from the pot. [Website](https://www.defifa.net/) - [Discord](https://discord.gg/hrZnvs65Nh) - [GitHub](https://github.com/BallKidz) - [Juicebox](https://juicebox.money/@defifa) Croptop [Croptop](https://croptop.eth.limo) allows anyone to host a peer-to-peer content feed on IPNS and make it available from their ENS address (for example, see [`jango.eth.limo`](https://jango.eth.limo)). Each image, video, audio clip, or text post can be minted as an NFT from the owner's Juicebox project. [Website](https://croptop.eth.limo) - [Discord](https://discord.gg/Z6zGXSGHnv) - [GitHub](https://github.com/mejango/croptop-contract) Juicebox Cards Juicebox projects are NFTs, held in the wallet of the project owner. Project owners can update the NFT's metadata. By default, these NFTs show the project's balance, payouts, and other details. [Juicebox Cards](https://juicebox.cards) allows people to mint ERC-1155 copies of these NFTs (NFT editions), and forwards revenues to the corresponding projects (optionally tipping the [metadata](https://juicebox.money/v2/p/465) project). Project creators can sell these cards to generate additional revenue and help their communities stay up to date with the project. [Website](https://juicebox.cards/) - [Contract GitHub](https://github.com/nnnnicholas/juicebox-project-cards) - [Frontend GitHub](https://github.com/nnnnicholas/juicebox-project-cards-frontend) - [Juicebox](https://juicebox.money/v2/p/465) Nance [Nance](https://nance.app) is a governance platform for Juicebox projects which integrates with Discord, Snapshot, Safe, Notion, and Juicebox. [JuiceboxDAO's Governance](https://docs.juicebox.money/dao/process/) runs through Nance – if you need help setting up or facilitating governance for your project, inquire in the [Nance Discord](https://discord.gg/SUyeNcEuaK). [Website](https://nance.app/) - [Discord](https://discord.gg/SUyeNcEuaK) - [GitHub](https://github.com/nance-eth/nance-interface) - [Juicebox](https://juicebox.money/v2/p/477) Bananapus Bananapus [was created](https://www.jbdao.org/p/368) to work on L2 deployments, on-chain governance, and cross-chain staking for Juicebox projects. [Discord](https://discord.com/ErQYmth4dS) - [Juicebox](https://juicebox.money/v2/p/488) WAGMI Studios WAGMI Studios is the team behind the art on [juicebox.money](https://juicebox.money) and JuiceboxDAO's online profiles – if you need art for NFTs or branding, inquire in their [Discord](https://discord.com/XnYFFGaXsu). [Website](https://wagmistudios.xyz/) - [Juicebox](https://juicebox.money/@wagmi-studios) - [Discord](https://discord.com/XnYFFGaXsu) "
20,juice-docs/docs/user/resources/links.md," | Name & Link | Description | | | | [ethereum.org](https://ethereum.org/) | If you would like to learn about Ethereum or cryptocurrency concepts, or need a refresher, ethereum.org is a fantastic resource. | | [Metamask](https://metamask.io/) | Metamask is a free Ethereum wallet which runs in your browser. Their [FAQ](https://metamask.io/faqs/) answers some common questions you may have. | | [Fulfillment from A to Z](https://www.kickstarter.com/help/resources) | Kickstarter's recommended list of services: design, fulfillment, manufacturing, merchandise, shipping, and more. | | [How To Build a Marketing Plan That Actually Works](https://www.shopify.com/blog/marketing-plan) | Shopify's recommendations for building a marketing plan. Also see [our Visibility tips](/user/next-steps/visibility/). | | [Free Business Plan Template With Examples for Small Businesses (2023)](https://www.shopify.com/blog/business-plan-template) | From Shopify: ""This template is designed to ensure you’re thinking through all of the important facets of starting a new business."" | "
21,juice-docs/docs/user/resources/snapshot.md," Using Snapshot With Juicebox info Most projects ratify some type of Governance Process to use alongside Snapshot voting. Feel free to use [our process](https://docs.juicebox.money/dao/process/) as a starting point. You can also [contact onboarding](https://juicebox.money/contact), or join the [Juicebox Discord](https://discord.gg/juicebox) and tag `filipvv` and `0xSTVG.eth#7744` for help! What's Snapshot? From the [Snapshot Docs](https://docs.snapshot.org/): > Snapshot is a decentralized voting system. It provides flexibility on how voting power is calculated for a vote. Snapshot supports various voting types to cater to the needs of organizations. Creating proposals and voting on Snapshot is user-friendly and does not cost gas as the process is performed off-chain. > > In short, Snapshot is an off-chain gasless multi-governance client with easy to verify and hard to contest results. How to set up a Snapshot space You can deploy a Snapshot space for your project on [snapshot.org](https://snapshot.org/#/setup), or you can: 1. Visit your project's page on [juicebox.money](https://juicebox.money). 2. Open your project settings by clicking the gear in the upper right-hand corner. 3. Selecting `Governance` in the left-hand sidebar. Both of these options will require you to have an ENS address (this is a short name ending with `.eth` that refers to your wallet). If you don't have an ENS, visit [app.ens.domains](https://app.ens.domains). Once your space is created, visit it on [Snapshot.org](https://snapshot.org/#/) and open the `Settings`. Here, you can change your space's name & avatar, and configure how voting power is calculated with one or more **Strategies**. Several strategies have been prepared for you below. Make sure you follow the TODO notes, and delete the notes once you do. If you need help customizing your parameters or are looking for a different strategy, send a message in the [Juicebox Discord](https://discord.gg/juicebox). You can have up to 8 strategies, and voting power is cumulative across them. Strategies Project Token Voting This strategy gives each address one vote per project token held, taking both claimed ERC-20s and unclaimed tokens into account. If you want to add delegation, use this **AND** the [Project Token Delegation strategy](#project-token-delegation). 1. Add a `contract-call` strategy. 2. Use these parameters: ```json { 	""args"": [ 		""%{address}"", 		""0x01"" // TODO: REPLACE WITH YOUR PROJECT ID HEX ENCODED. 	], 	""symbol"": ""JBX"", // TODO: REPLACE WITH YOUR TOKEN SYMBOL. 	""address"": ""0x6FA996581D7edaABE62C15eaE19fEeD4F1DdDfE7"", 	""decimals"": 18, 	""methodABI"": { 	""name"": ""balanceOf"", 	""type"": ""function"", 	""inputs"": [ 		{ 			""name"": """", 			""type"": ""address"", 			""internalType"": ""address"" 		}, 		{ 			""name"": """", 			""type"": ""uint256"", 			""internalType"": ""uint256"" 		} 	], 	""outputs"": [ 		{ 			""name"": """", 			""type"": ""uint256"", 			""internalType"": ""uint256"" 		} 	], 	""stateMutability"": ""view"" 	} } ``` Project Token Delegation This strategy allows voters to delegate their project token votes to somebody else. When Bobby delegates his voting power to Alice, Alice gets all of Bobby's voting power in addition to her own, but only when Bobby doesn't vote. If Bobby votes, he reclaims all of his voting power (for that vote). If you use this strategy, **you must also add the [Project Token Voting strategy](#project-token-voting).** 1. Add a `delegation` strategy. 2. Use these parameters: ```json { ""symbol"": ""JBX (delegated)"", // TODO: REPLACE WITH YOUR TOKEN SYMBOL. ""strategies"": [ { ""name"": ""contract-call"", ""params"": { ""args"": [ ""%{address}"", ""0x01"" // TODO: REPLACE WITH YOUR PROJECT ID HEX ENCODED. ], ""symbol"": ""JBX"", // TODO: REPLACE WITH YOUR TOKEN SYMBOL. ""address"": ""0x6FA996581D7edaABE62C15eaE19fEeD4F1DdDfE7"", ""decimals"": 18, ""methodABI"": { ""name"": ""balanceOf"", ""type"": ""function"", ""inputs"": [ { ""name"": """", ""type"": ""address"", ""internalType"": ""address"" }, { ""name"": """", ""type"": ""uint256"", ""internalType"": ""uint256"" } ], ""outputs"": [ { ""name"": """", ""type"": ""uint256"", ""internalType"": ""uint256"" } ], ""stateMutability"": ""view"" } } } ] } ``` NFT Voting Weight This strategy gives each address votes based on their NFT's [Voting Weight](/user/configuration/#tiers). 1. Add a `contract-call` strategy. 2. Use the following parameters: ```json { ""args"": [ ""0x33f37dda8936568456d630dc6a41886bfdda4a2d"", // TODO: REPLACE WITH YOUR NFT'S ADDRESS. ""%{address}"" ], ""address"": ""0xffB2Cd8519439A7ddcf2C933caedd938053067D2"", ""symbol"": ""MONKEY"", // TODO: REPLACE WITH YOUR SYMBOL. ""decimals"": 0, ""methodABI"": { ""inputs"": [ { ""name"": ""_nft"", ""internalType"": ""address"", ""type"": ""address"" }, { ""name"": ""_account"", ""internalType"": ""address"", ""type"": ""address"" } ], ""name"": ""votingUnitsOf"", ""outputs"": [ { ""internalType"": ""uint256"", ""name"": ""units"", ""type"": ""uint256"" } ], ""stateMutability"": ""view"", ""type"": ""function"" } } ``` NFT Balance This strategy gives each address one vote per NFT held, taking all tiers into account. 1. Add a `contract-call` strategy. 2. Use the following parameters: ```json { ""args"": [ ""0x33f37dda8936568456d630dc6a41886bfdda4a2d"", // TODO: REPLACE WITH YOUR NFT'S ADDRESS. ""%{address}"" ], ""address"": ""0xffB2Cd8519439A7ddcf2C933caedd938053067D2"", ""symbol"": ""MONKEY"", // TODO: REPLACE WITH YOUR SYMBOL. ""decimals"": 0, ""methodABI"": { ""inputs"": [ { ""name"": ""_nft"", ""internalType"": ""address"", ""type"": ""address"" }, { ""name"": ""_owner"", ""internalType"": ""address"", ""type"": ""address"" } ], ""name"": ""balanceOf"", ""outputs"": [ { ""internalType"": ""uint256"", ""name"": ""balance"", ""type"": ""uint256"" } ], ""stateMutability"": ""view"", ""type"": ""function"" } } ``` "
22,juice-docs/docs/user/resources/legal.md," [juicebox.money](https://juicebox.money) does not provide any legal services for your project – if you're interested in setting up an entity or other legal agreements, you should speak with a legal expert. The resources below may be a good starting place. Legal Tools | Name & Link | Description | | | | [LexDAO](https://www.lexdao.coop/) | LexDAO is a club of crypto-savvy lawyers. Join their [Discord](https://discord.gg/QA75Zw4VTZ) to learn more. | | [Opolis](https://opolis.co/) | Helps individuals set up personal U.S. companies to manage payroll, benefits, and taxes. | | [MIDAO](https://www.midao.org/) | MIDAO helps DAOs incorporate in the Marshall Islands. | | [Otonomos](https://otonomos.com/) | Incorporation kits for crypto and tech in major jurisdictions around the world. | | [Doola](https://doola.com/) | U.S. business formation kits and banking setup. | | [OpenLaw](https://www.openlaw.io/) | A collection of free legal templates built to be used with Ethereum smart contracts. | Recommended Reading | Name & Link | Description | | | | [DAO Legal Entity Matrix](https://daos.paradigm.xyz/) | A simple resource for comparing various legal structures used by DAOs in the US as well as a few international jurisdictions. It is intended to be a starting point for founders and their legal counsel to better inform them about the issues as they consider potential legal structuring solutions for DAOs. | | [Legal Frameworks for DAOs series](https://a16z.com/tag/legal-frameworks-for-daos-series/) | Reference guides for DAO entity selection and features from Miles Jennings & David Kerr. | | [Choose a business structure](https://www.sba.gov/business-guide/launch-your-business/choose-business-structure) | A general-purpose guide for choosing a business structure within the United States. | | [0x Legal Guide](https://docs.0x.org/developer-resources/0x-legal-guide) | Overview of how U.S. financial regulations apply to cryptocurrency. | | [Cryptocurrency Laws and Regulations by State](https://pro.bloomberglaw.com/brief/cryptocurrency-laws-and-regulations-by-state/) | A brief overview of cryptocurrency laws within each U.S. State. | EU Svetlin (`svetlink#0129` on Discord) from [wrappr.wtf](https://www.wrappr.wtf/) and [LexDAO](https://www.lexdao.coop/)/LexClinic has provided several legal templates for Juicebox project creators within the EU: 1. [EU Privacy Policy](https://docs.juicebox.money/document/privacy-policy.md) 2. [Website Terms of Service [Lite Version]](/document/lite-tos.docx) 3. [DAO Terms of Service [Extended Version]](/document/extended-tos.docx) Project creators can use [wrappr.wtf](https://www.wrappr.wtf/) to launch and mint Delaware/Wyoming jurisdiction legal NFTs, such as limited liability ""legal wrappers"" for DAOs and wallets. danger None of the information, services, or materials offered on our Site constitute, or are intended to constitute, legal, financial, tax, investment, or other advice, and you should not act or refrain from acting based on any information, services, or materials provided on the Site. All content on our Site is information of a general nature and does not address the unique circumstances of any particular user. You are strongly urged to consult with your own legal, financial, tax, investment, and other advisors regarding all legal, financial, tax, and investment-related questions or concerns you have. For further information, please see our [Terms of Service](/tos). "
23,juice-docs/docs/user/resources/discord/index.md,"Discord Server Templates Discord is among the most popular social platforms in crypto. It allows users to create free, invite-only servers for their communities. Discord servers support messaging across multiple channels, voice/video calls, and the configuration of complex permission structures. Discord also supports bots and other automations through its API. Get Discord If you don't already have an account, create one at [discord.gg](https://discord.gg). You can access Discord via a web browser or through its native apps on Windows, macOS, Android, iOS, or Linux. If you are a complete beginner, take a look at Discord's [beginner's guide](https://support.discord.com/hc/en-us/articles/360045138571-Beginner-s-Guide-to-Discord). 1. Templates info Need a different template? Ask in the [Juicebox Discord](https://discord.gg/juicebox). First, pick a template to automatically configure channels, roles, permissions, and server settings. |Template|Description| |-|-| |[Discord For DAOs](https://discord.new/qsCbV9HGreJU)|This server works best for crypto-native communities and projects building in the open.| |[Discord For NFT Projects](https://discord.new/qYBEFhjzTpA5)|This server works best for NFT projects using Juicebox to manage revenues.| Name your server and upload a logo. You will be brought to your new Discord server! Acquaint yourself with the preconfigured channels and roles. 1.1 Note on Permissions Discord permissions are *cumulative*—users gain permissions from all of their roles, with positive permissions overriding negative ones. Channel permissions and category permissions behave differently; they override the permissions of users and roles within specific channels. All of the templates come with sensible defaults: non-admin users will not be able to send messages or create discussion threads within information/announcement channels. To test a role's permissions, click on your server's name (at the top of your channels list), and navigate to your `Server Settings`. Navigate to the `Roles` page, and click on the role you would like to test. Within the `Display` tab, scroll to the bottom and select `View Server as Role →`. This will let you test what actions the role can take and what channels it can see. 2. Server Settings Click on your server's name (at the top of your channels list), and navigate to your `Server Settings`. Our templates come with sensible defaults, but you may desire to reconfigure the following options: |Setting|Sidebar Menu|Description| |-|-|-| |**Show Boost progress bar**|Overview|When enabled, a server boost progress bar will display in your channel list. Server boosts allow for further customization.| |**Upload Emoji**|Emoji|Add custom emojis that anyone can use in your server.| |**Upload Sticker**|Stickers|Add custom stickers that anyone can use in your server.| |**Verification level**|Safety Setup|The criteria users must meet before they can send messages.| |**Enable 2FA Requirement**|Safety Setup|Require members with moderation powers to have two-factor authentication enabled. This setting is recommended.| 3. React Roles and Embeds *React roles* allow server members to easily self-assign roles by reacting to a message. The Discord bot [carl.gg](https://carl.gg) allows server owners to set up react roles, write custom embeds, and configure automod features if desired. To add carl.gg to your server: 1. Visit [carl.gg](https://carl.gg), sign in with your Discord account, and click `Manage` on the home page. 2. Select your server in this menu. You will be redirected to a Discord authentication page. Click `Continue`, then scroll down and click `Authorize`. You may need to fill out a captcha. 3. You will be redirected back to [carl.gg](https://carl.gg). Click `SKIP` to open your dashboard. 3.1 Your ""README"" 1. Open your server's [carl.gg dashboard](https://carl.gg/dashboard/). 2. Open the `Reaction roles` page in the sidebar. Click `Create new reaction role`. 3. In the Mode category, select `Post embed` and select your `#✨｜read-me` channel. Then click `Show embed builder`. Type a brief server intro using the `Title` and the `Description` fields. This message will be the first thing users see when they join your Discord server. You can format this message with [markdown](https://www.markdownguide.org/cheat-sheet/). **The title:** ```text Welcome to the Stapler DAO Discord server! ``` **With the description:** ```text Stapler DAO is disrupting the stapler industry with groundbreaking blockchain technology. If you have questions, visit our [website](http://info.cern.ch/). Click the 📢 for announcement notifications! ``` **Will be formatted like so:** Once your message is written, click `Add emoji`, select the loudspeaker emoji, and select the announcements role. Users that click the loudspeaker will now be notified when you tag the `@announcements` role. Click `Create` to publish your message. 3.2 Contributor Roles 1. Open your server's [carl.gg dashboard](https://carl.gg/dashboard/). 2. Open the `Reaction roles` page in the sidebar. Click `Create new reaction role`. 3. In the Mode category, select `Post embed` and select your `#✨｜read-me` channel. Then click `Show embed builder`. Fill out the `Title` and `Description` fields with a brief description of your contributor roles. **The title:** ```text React to receive contributor roles! ``` **With the description:** ```text 💻・Developer 👪・Community Management 👀・Visibility 🏛️・Governance 🛹・Onboarding 💸・Finances 🤝・Partnerships ``` **Will be formatted like so:** Once your message is written, click `Add emoji` to add reaction emojis and their corresponding roles. These should be added one at a time, with each emoji corresponding to one role: Click `Create` to publish your message. 3.3 Links Embed A links embed will guide your community to DAO's resources and websites. To create one: 1. Open your server's [carl.gg dashboard](https://carl.gg/dashboard/). Open the `Embeds` page in the sidebar. 2. Fill out the `Title` field—*Stapler DAO Links*, for example. 3. Add your links to the `Description` field, formatted in [markdown](https://www.markdownguide.org/cheat-sheet/). An input of `[Juicebox Docs](https://docs.juicebox.money)` will be formatted to: [Juicebox Docs](https://docs.juicebox.money). If you have many links, you may want to separate them with bolded category titles. An input of `**Example Text**` will be formatted to: **Example Text**. 4. Select your `#🔗｜links` channel in the `Destination` field. Click `Post` to publish your links embed. 4. Twitter Feed [IFTTT](https://ifttt.com/) allows you to create simple automations for popular web services. IFTTT's free plan will allow you to create a live Twitter feed in your Discord server: 1. Open your server's settings and open the `Integrations` page. 2. Click `Create Webhook`. Assign a screen name and profile picture here. Assign this integration to the `#🐦｜twitter-feed` channel. An example webhook configuration 3. In a new tab, open [IFTTT](https://ifttt.com). If you do not already have an account, [create one at ifttt.com/join](https://ifttt.com/join). 4. Sign in to IFTTT and navigate to [ifttt.com/create](https://ifttt.com/create). 5. Click `Add` next to *If This* and select the `Twitter` service. Select the `New tweet by you` trigger. 6. Add your Twitter account and select it. If desired, you can include retweets and @replies. Click `Create trigger`. 7. Click `Add` next to *Then That* and select the `Webhooks` service. Select the `Make a web request` action. 8. Open your webhook in your server's settings, and click `Copy Webhook URL`. Paste this URL in IFTTT's `URL` field. 9. Select `POST` as your Method. Select `application/json` as your Content Type. Paste this into the Body field: ```json { ""content"":""{{LinkToTweet}}"" } ``` 10. Click `Create action`, `Continue`, and `Finish`. **The Tweet:** **Will be rendered like so:** 5. Next Steps You are done! Optionally: - To enable features like discovery, server metrics, and a welcome screen, navigate to the `Enable Community` page in your server settings and click `Get Started`. - Add new categories and channels for different languages. - Add new reaction roles with [carl.gg](https://carl.gg). "
